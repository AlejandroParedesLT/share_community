version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django_backend
    #command: ["/app/entrypoint.sh", "gunicorn", "socialmedia.wsgi:application", "--bind", "0.0.0.0:8001"]
    command: ["/app/entrypoint.sh", "daphne", "-b", "0.0.0.0", "-p", "8001", "socialmedia.asgi:application"]
    environment:
      - DJANGO_SETTINGS_MODULE=socialmedia.settings  # âœ… Ensure settings are loaded
    # command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./backend:/app
    ports:
      - "8001:8001"
    depends_on:
      - postgres_vector_db
      - minio
      - minio-client
      # - oracle_db
      # - mongo_db
    env_file:
      - .env

  # postgres_db:
  #   image: postgres:15
  #   container_name: postgres_db
  #   restart: always
  #   environment:
  #     POSTGRES_DB: mydatabase
  #     POSTGRES_USER: ${GLOBAL_USER}
  #     POSTGRES_PASSWORD: ${GLOBAL_PASSWORD}
  #   ports:
  #     - "5431:5432"
  #   volumes:
  #     - ./data/postgres:/var/lib/postgresql/data

  postgres_vector_db: #VECTOR_DB
    image: ankane/pgvector:latest
    container_name: postgres_db
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${GLOBAL_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: ${GLOBAL_USER}
      POSTGRES_PASSWORD: ${GLOBAL_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  frontend_react:
    build:
      context: ./frontend/reactFrontendSocialMedia
      dockerfile: Dockerfile
      args:
        TARGET_ENV: ${FRONTEND_ENV}
    container_name: frontend_WebReact
    ports:
      - "${FRONTEND_PORT}:5173"
    depends_on:
      - backend
    volumes:
      - ./frontend/reactFrontendSocialMedia:/app
      - /app/node_modules

  # frontend_reactNative:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #     args:
  #       TARGET_ENV: ${FRONTEND_ENV}
  #   container_name: frontend
  #   ports:
  #     - "${FRONTEND_PORT}:80"
  #   depends_on:
  #     - backend
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules

  minio:
    image: minio/minio
    container_name: minio_vector
    restart: always
    ports:
      - "9000:9000"   # MinIO API Port (S3-compatible)
      - "9001:9001"   # MinIO Web UI
    volumes:
      - ./data/minio:/data
    environment:
      MINIO_ROOT_USER: ${GLOBAL_USER}
      MINIO_ROOT_PASSWORD: ${GLOBAL_PASSWORD}
    env_file:
      - .env
    command: ["server", "/data", "--console-address", ":9001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  # minio-client:
  #   image: minio/mc:latest
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #   entrypoint: >
  #     /bin/sh -c "
  #     sleep 5;
  #     /usr/bin/mc config host add --quiet --api s3v4 myminio http://minio:9000 ${GLOBAL_USER} ${GLOBAL_PASSWORD};
  #     /usr/bin/mc mb --quiet myminio/django-media || true;
  #     /usr/bin/mc policy set public myminio/django-media;
      
  #     # Create service account for application
  #     /usr/bin/mc config host add --quiet --api s3v4 myminio http://minio:9000 ${GLOBAL_USER} ${GLOBAL_PASSWORD} || echo 'Host already exists';
  #     /usr/bin/mc admin user add myminio ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} || echo 'User already exists or user creation failed';
  #     /usr/bin/mc admin policy set myminio readwrite user=${AWS_ACCESS_KEY_ID}  || echo 'Policy attached or user policy failed';
      
  #     echo 'MinIO setup completed successfully';
  #     "
  #   env_file:
  #     - .env
  minio-client:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./setup-minio.sh:/setup-minio.sh  # Mount the setup script (not a directory)
      - ./docker-entrypoint.sh:/docker-entrypoint.sh  # Mount your entrypoint script

    entrypoint: ["/bin/sh", "/docker-entrypoint.sh"]  # This should execute the script
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "[ -f /tmp/minio-setup-done ]"]
      interval: 5s
      timeout: 5s
      retries: 10

volumes:
  postgres_data:
  # oracle_data:
  # mongo_data:
  minio_data:

#MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
#MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}


